#!/usr/bin/env python3
#
from datetime import datetime, timezone
import getopt
import re
import sys
import traceback

LEASE_FILE = "/var/lib/dhcp/db/dhcpd.leases"
OUI_FILE = "/usr/share/misc/oui.txt"


class OuiResolver:
    HEX_DIGIT_PATTERN = r"[0-9a-fA-F]"
    OUI_PATTERN = fr"{HEX_DIGIT_PATTERN}{{2}}-{HEX_DIGIT_PATTERN}{{2}}-{HEX_DIGIT_PATTERN}{{2}}"
    OUI_ENTRY_RE = re.compile(fr"^({OUI_PATTERN})\s+\S+\s+(.+)$")

    def __init__(self, ouiFilePath):
        self._parse(ouiFilePath)

    def _parse(self, ouiFilePath):
        self._ouis = { }
        with open(ouiFilePath, "r") as ouiFile:
            for line in ouiFile:
                match = self.OUI_ENTRY_RE.match(line)
                if match:
                    mac = match.group(1).lower()
                    self._ouis[mac] = match.group(2)

    def lookup(self, mac):
        if mac is None:
            return None
        macMembers = mac.lower().split(":")
        manufacturer = "-".join(macMembers[0:3])
        return self._ouis[manufacturer] if manufacturer in self._ouis else None


class DhcpLeaseFile:
    IP_PATTERN = r"\d+\.\d+.\d+\.\d+"
    HEX_DIGIT_PATTERN = r"[0-9a-fA-F]"
    MAC_PATTERN = (fr"{HEX_DIGIT_PATTERN}{{2}}:{HEX_DIGIT_PATTERN}{{2}}:{HEX_DIGIT_PATTERN}{{2}}:"
        fr"{HEX_DIGIT_PATTERN}{{2}}:{HEX_DIGIT_PATTERN}{{2}}:{HEX_DIGIT_PATTERN}{{2}}")
    DATE_PATTERN = r"[\d\/ :]+"
    LEASE_RE = re.compile(fr"lease ({IP_PATTERN}) {{")
    ETHERNET_RE = re.compile(fr"hardware ethernet ({MAC_PATTERN})")
    HOSTNAME_RE = re.compile(r"client-hostname \"([^\"]+)\"")
    DDNS_FWD_NAME_RE = re.compile(r"set ddns-fwd-name = \"([^\"]+)\"")
    LEASE_START_RE = re.compile(fr"starts \d ({DATE_PATTERN})")
    LEASE_END_RE = re.compile(fr"ends \d ({DATE_PATTERN})")
    BINDING_STATE_RE = re.compile(fr"^\s+binding state (\w+)")

    def __init__(self):
        self._leases = { }
        self._localtimezone = datetime.now().astimezone().tzinfo
        self._leasePatterns = {
            "mac": {
                "pattern": self.ETHERNET_RE,
            },
            "hostname": {
                "pattern": self.HOSTNAME_RE,
            },
            "start": {
                "pattern": self.LEASE_START_RE,
                "conversion": lambda dt : DhcpLeaseFile._to_local_time(dt)
            },
            "end": {
                "pattern": self.LEASE_END_RE,
                "conversion": lambda dt : DhcpLeaseFile._to_local_time(dt)
            },
            "bindingState": {
                "pattern": self.BINDING_STATE_RE,
            },
        }

    def _to_local_time(str):
        time = datetime.strptime(str, "%Y/%m/%d %H:%M:%S")
        utctime = time.replace(tzinfo=timezone.utc)
        localtime = utctime.astimezone() #(tzinfo=localtimezone)
        # print(f"UTC time: {time}")
        # print(f"Local time: {localtime}")
        return localtime

    def _process_lease(self):
        properties = { }
        for line in self._leaseFile:
            # print(f"[process_lease] Evaluating line: {line}")
            if line.startswith("}"):
                break

            for name, patternProperties in self._leasePatterns.items():
                match = patternProperties["pattern"].search(line)
                if match:
                    #print(f"Matched {name}")
                    value = match.group(1)
                    if "conversion" in patternProperties:
                        value = patternProperties["conversion"](value)
                    properties[name] = value

        return properties

    def parse(self, leaseFile):
        with open(leaseFile, "r") as self._leaseFile:
            for line in self._leaseFile:
                # print(f"Evaluating line: {line}")
                match = self.LEASE_RE.match(line)
                if match:
                    ip = match.group(1)
                    # print(f"Processing lease {ip}...")
                    lease = self._process_lease()
                    self._leases[ip] = lease

        return self._leases


sort_criteria = {
    "i": lambda x: x[0],
    "b": lambda x: x[1]["start"],
    "e": lambda x: x[1]["end"]
}

def usage():
    print(f"{argv[0]} [-a][-b][-e]")

def main(argv):
    print_expired_leases = False
    sort_choice = sort_criteria["i"]

    try:
        opts, args = getopt.getopt(argv[1:], "abe")
    except getopt.GetoptError:
        usage()
        sys.exit(2)

    for opt, arg in opts:
        if opt == '-h':
            usage()
            sys.exit(0)
        elif opt in ("-a"):
            print_expired_leases = True
        elif opt in ("-b", "-e"):
            sort_choice = sort_criteria[opt[1:]]


    oui_resolver = OuiResolver(OUI_FILE)

    leaseFile = DhcpLeaseFile()
    leases = leaseFile.parse(LEASE_FILE)

    endWidth = 27 if print_expired_leases else 20
    print('{:15} {:20} {:{endWidth}} {:18} {:15} {}'.format("IP", "Lease Start", "Lease End", "MAC", "Hostname", "Manufacturer", endWidth=endWidth))
    print('{:-<15} {:-<20} {:-<{endWidth}} {:-<18} {:-<15} {:-<18}'.format("", "", "", "", "", "", endWidth=endWidth))
    now = datetime.now().astimezone()
    for ip, values in sorted(leases.items(), key=sort_choice):
        try:
            start = values["start"]
            end = values["end"]
            binding_state = values["bindingState"]

            lease_expired = (values["end"] < now)
            lease_valid = (binding_state == "active")
            expired = "(exp.)" if lease_expired else ""
            expired = expired or "(inv.)" if not lease_valid else ""
            expired_width = 8 if print_expired_leases else 1

            mac = values["mac"] if "mac" in values else ""
            manufacturer = oui_resolver.lookup(mac) or "N/A"

            hostname = values["hostname"] if "hostname" in values else ""

            start_date = start.strftime("%Y/%m/%d %H:%M:%S")
            end_date = end.strftime("%Y/%m/%d %H:%M:%S")
            if lease_valid or print_expired_leases:
                print(f'{ip:16}{start_date:21}{end_date:20}{expired:{expired_width}}{mac:18} {hostname:15} {manufacturer}')
            # elif print_expired_leases:
                # print(f'{ip:16}{start_date:21}{end_date:20}{expired:{expired_width}}{mac:18} {hostname:15} {manufacturer}')
        except Exception as e:
            print(f"Failed processing a DHCP entry: {e}")
            traceback.print_exc()
            print(f"{ip}: {values}")


if __name__ == "__main__":
    main(sys.argv)
